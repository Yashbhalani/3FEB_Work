/**
 * 
 */
package com.gateway.traineeproject.service;

import java.util.List;
import java.util.Optional;

import javax.persistence.EntityExistsException;
import javax.persistence.EntityNotFoundException;

import org.hibernate.exception.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.stereotype.Service;

import com.gateway.traineeproject.model.Brand;
import com.gateway.traineeproject.repository.BrandRepository;
import com.gateway.traineeproject.repository.ModelRepository;
import com.gateway.traineeproject.repository.VehicleRepository;


/**
 * @author Hiren Khatri
 *
 */
@Service
public class BrandService {
	@Autowired
	private BrandRepository brandRepository;
	@Autowired
	private ModelRepository modelRepository;
	
	public List<Brand> findAll(){
		return brandRepository.findAll();
	}
	
	public Optional<Brand> findById(Long id) {
		return brandRepository.findById(id);
	}
	
	public Brand save(Brand brandToBeSaved){
		if(brandRepository.existsById(brandToBeSaved.getId())) {
			throw new EntityExistsException("There is already existing entity with such ID in the database.");
		}
		if(brandRepository.existsByName(brandToBeSaved.getName())) {
			throw new ConstraintViolationException("There is already existing entity with same name in the database.",null,null);
		}
			return brandRepository.save(brandToBeSaved);
	}
	
	public Brand update(Brand brandToBeUpdated) {
		if(!brandRepository.existsById(brandToBeUpdated.getId())) {
			throw new EntityNotFoundException("There is no existing entity with such ID in the database.");
		}
		try {
		Example<Brand> example = Example.of(brandToBeUpdated);
		if(brandRepository.existsByName(brandToBeUpdated.getName()) && !brandRepository.exists(example)) {
			throw new EntityExistsException("There is already existing entity with same name in the database.");
		}
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return brandRepository.save(brandToBeUpdated);
	}
	
	public void delete(Long id) {
		if(!brandRepository.existsById(id)) {
			throw new EntityNotFoundException("There is no existing entity with such ID in the database.");
		}		
		Brand brand = new Brand();
		brand.setId(id);
		if(modelRepository.existsByBrand(brand)) {
			throw new ConstraintViolationException("Brand can not be deleted as vehicles are associated with this brand!", null, null);
		}
			brandRepository.deleteById(id);
		
	}
}
