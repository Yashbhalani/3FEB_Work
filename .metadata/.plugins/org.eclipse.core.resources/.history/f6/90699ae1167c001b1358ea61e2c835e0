package com.gateway.traineeproject.controller;

import java.net.URI;
import java.util.List;
import java.util.Optional;

import javax.persistence.EntityExistsException;
import javax.persistence.EntityNotFoundException;

import org.hibernate.exception.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.gateway.traineeproject.model.Brand;
import com.gateway.traineeproject.model.Quote;
import com.gateway.traineeproject.service.QuoteService;

/**
 * @author hiren.khatri
 *
 */
@RestController
@CrossOrigin(origins = "*")
public class QuoteController {
	
	@Autowired
	private QuoteService quoteService;
	
	@GetMapping("api/quotes")
	public List<Quote> getAllQuotes(){
		return quoteService.findAll();
	}
	
	@GetMapping("api/quotes/{id}")
	public ResponseEntity<?> getQuote(long id){
		Optional<Quote> foundQuote = quoteService.findById(id);

		if (!foundQuote.isPresent()) {
			return new ResponseEntity<>("Not Found!!",HttpStatus.NOT_FOUND);
		}

		Quote quote = foundQuote.get();

		return ResponseEntity.ok(quote);
	}
	
	@PostMapping("api/quotes")
	public ResponseEntity<?> create(@RequestBody Quote quoteToBeSaved) {
		try {
			Quote quote = quoteService.create(quoteToBeSaved);
			
			return ResponseEntity.ok(quote);
		} catch (EntityExistsException e) {
			return new ResponseEntity<Brand>(HttpStatus.CONFLICT);
		}catch (ConstraintViolationException e) {
			return new ResponseEntity<>(e.getMessage(),HttpStatus.BAD_REQUEST);
		}catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>("Something went wrong! Please try again!!",HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@PutMapping("api/quotes")
	public ResponseEntity<?> update(@RequestBody Quote quoteToBeUpdated){
		try {
			Quote quote = quoteService.update(quoteToBeUpdated);
			return ResponseEntity.created(new URI("/api/quotes/" + quote.getId())).body(quote);
		} catch (EntityNotFoundException e) {
			return new ResponseEntity<Brand>(HttpStatus.CONFLICT);
		}catch (Exception e) {
			return new ResponseEntity<>("Something went wrong! Please try again!!",HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@DeleteMapping("api/quotes/{id}")
	public ResponseEntity<?> deleteQuote(long id){
		try {
			Quote quote = quoteService.delete(id);
			return ResponseEntity.ok(quote);
		} catch (EntityNotFoundException e) {
			return new ResponseEntity<>("The quote not found!",HttpStatus.CONFLICT);
		}catch (Exception e) {
			return new ResponseEntity<>("Something went wrong! Please try again!!",HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
}
